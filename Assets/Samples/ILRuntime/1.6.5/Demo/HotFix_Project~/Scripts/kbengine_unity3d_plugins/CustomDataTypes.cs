/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;



	public class DATATYPE_AVATAR_LIST : DATATYPE_BASE
	{
		private DATATYPE__AVATAR_LIST_ids_ArrayType_ChildArray ids_DataType = new DATATYPE__AVATAR_LIST_ids_ArrayType_ChildArray();

		public class DATATYPE__AVATAR_LIST_ids_ArrayType_ChildArray : DATATYPE_BASE
		{
			public List<UInt64> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<UInt64> datas = new List<UInt64>();

				while(size > 0)
				{
					--size;
					datas.Add(stream.readUint64());
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<UInt64> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					stream.writeUint64(v[i]);
				};
			}
		}

		public AVATAR_LIST createFromStreamEx(MemoryStream stream)
		{
			AVATAR_LIST datas = new AVATAR_LIST();
			datas.ids = ids_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_LIST v)
		{
			ids_DataType.addToStreamEx(stream, v.ids);
		}
	}



	public class DATATYPE_INT_VECTOR2 : DATATYPE_BASE
	{
		public INT_VECTOR2 createFromStreamEx(MemoryStream stream)
		{
			INT_VECTOR2 datas = new INT_VECTOR2();
			datas.x = stream.readInt32();
			datas.z = stream.readInt32();
			return datas;
		}

		public void addToStreamEx(Bundle stream, INT_VECTOR2 v)
		{
			stream.writeInt32(v.x);
			stream.writeInt32(v.z);
		}
	}



	public class DATATYPE_CMD : DATATYPE_BASE
	{
		private DATATYPE_INT_VECTOR2 pos_DataType = new DATATYPE_INT_VECTOR2();
		public CMD createFromStreamEx(MemoryStream stream)
		{
			CMD datas = new CMD();
			datas.cardId = stream.readInt32();
			datas.pid = stream.readInt32();
			datas.pos = pos_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, CMD v)
		{
			stream.writeInt32(v.cardId);
			stream.writeInt32(v.pid);
			pos_DataType.addToStreamEx(stream, v.pos);
		}
	}



	public class DATATYPE_FRAME_SYNC : DATATYPE_BASE
	{
		private DATATYPE__FRAME_SYNC_cmds_ArrayType_ChildArray cmds_DataType = new DATATYPE__FRAME_SYNC_cmds_ArrayType_ChildArray();

		public class DATATYPE__FRAME_SYNC_cmds_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_CMD itemType = new DATATYPE_CMD();

			public List<CMD> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<CMD> datas = new List<CMD>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<CMD> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public FRAME_SYNC createFromStreamEx(MemoryStream stream)
		{
			FRAME_SYNC datas = new FRAME_SYNC();
			datas.cmds = cmds_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, FRAME_SYNC v)
		{
			cmds_DataType.addToStreamEx(stream, v.cmds);
		}
	}



	public class DATATYPE_FRAME_LIST : DATATYPE_BASE
	{
		private DATATYPE__FRAME_LIST_frames_ArrayType_ChildArray frames_DataType = new DATATYPE__FRAME_LIST_frames_ArrayType_ChildArray();

		public class DATATYPE__FRAME_LIST_frames_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_FRAME_SYNC itemType = new DATATYPE_FRAME_SYNC();

			public List<FRAME_SYNC> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<FRAME_SYNC> datas = new List<FRAME_SYNC>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<FRAME_SYNC> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public FRAME_LIST createFromStreamEx(MemoryStream stream)
		{
			FRAME_LIST datas = new FRAME_LIST();
			datas.frames = frames_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, FRAME_LIST v)
		{
			frames_DataType.addToStreamEx(stream, v.frames);
		}
	}


}